schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "body_info_data_histories"
"""
type body_info_data_histories {
  body_fat_percentage: Int
  created_at: timestamptz!
  date: timestamptz!
  height: numeric
  id: Int!
  is_record: Boolean!
  updated_at: timestamptz!
  user_id: Int!
  weight: numeric!
}

"""
aggregated selection of "body_info_data_histories"
"""
type body_info_data_histories_aggregate {
  aggregate: body_info_data_histories_aggregate_fields
  nodes: [body_info_data_histories!]!
}

"""
aggregate fields of "body_info_data_histories"
"""
type body_info_data_histories_aggregate_fields {
  avg: body_info_data_histories_avg_fields
  count(columns: [body_info_data_histories_select_column!], distinct: Boolean): Int!
  max: body_info_data_histories_max_fields
  min: body_info_data_histories_min_fields
  stddev: body_info_data_histories_stddev_fields
  stddev_pop: body_info_data_histories_stddev_pop_fields
  stddev_samp: body_info_data_histories_stddev_samp_fields
  sum: body_info_data_histories_sum_fields
  var_pop: body_info_data_histories_var_pop_fields
  var_samp: body_info_data_histories_var_samp_fields
  variance: body_info_data_histories_variance_fields
}

"""aggregate avg on columns"""
type body_info_data_histories_avg_fields {
  body_fat_percentage: Float
  height: Float
  id: Float
  user_id: Float
  weight: Float
}

"""
Boolean expression to filter rows from the table "body_info_data_histories". All fields are combined with a logical 'AND'.
"""
input body_info_data_histories_bool_exp {
  _and: [body_info_data_histories_bool_exp!]
  _not: body_info_data_histories_bool_exp
  _or: [body_info_data_histories_bool_exp!]
  body_fat_percentage: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  date: timestamptz_comparison_exp
  height: numeric_comparison_exp
  id: Int_comparison_exp
  is_record: Boolean_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: Int_comparison_exp
  weight: numeric_comparison_exp
}

"""
unique or primary key constraints on table "body_info_data_histories"
"""
enum body_info_data_histories_constraint {
  """unique or primary key constraint"""
  body_info_data_histories_pkey
}

"""
input type for incrementing numeric columns in table "body_info_data_histories"
"""
input body_info_data_histories_inc_input {
  body_fat_percentage: Int
  height: numeric
  id: Int
  user_id: Int
  weight: numeric
}

"""
input type for inserting data into table "body_info_data_histories"
"""
input body_info_data_histories_insert_input {
  body_fat_percentage: Int
  created_at: timestamptz
  date: timestamptz
  height: numeric
  id: Int
  is_record: Boolean
  updated_at: timestamptz
  user_id: Int
  weight: numeric
}

"""aggregate max on columns"""
type body_info_data_histories_max_fields {
  body_fat_percentage: Int
  created_at: timestamptz
  date: timestamptz
  height: numeric
  id: Int
  updated_at: timestamptz
  user_id: Int
  weight: numeric
}

"""aggregate min on columns"""
type body_info_data_histories_min_fields {
  body_fat_percentage: Int
  created_at: timestamptz
  date: timestamptz
  height: numeric
  id: Int
  updated_at: timestamptz
  user_id: Int
  weight: numeric
}

"""
response of any mutation on the table "body_info_data_histories"
"""
type body_info_data_histories_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [body_info_data_histories!]!
}

"""
on_conflict condition type for table "body_info_data_histories"
"""
input body_info_data_histories_on_conflict {
  constraint: body_info_data_histories_constraint!
  update_columns: [body_info_data_histories_update_column!]! = []
  where: body_info_data_histories_bool_exp
}

"""Ordering options when selecting data from "body_info_data_histories"."""
input body_info_data_histories_order_by {
  body_fat_percentage: order_by
  created_at: order_by
  date: order_by
  height: order_by
  id: order_by
  is_record: order_by
  updated_at: order_by
  user_id: order_by
  weight: order_by
}

"""primary key columns input for table: body_info_data_histories"""
input body_info_data_histories_pk_columns_input {
  id: Int!
}

"""
select columns of table "body_info_data_histories"
"""
enum body_info_data_histories_select_column {
  """column name"""
  body_fat_percentage

  """column name"""
  created_at

  """column name"""
  date

  """column name"""
  height

  """column name"""
  id

  """column name"""
  is_record

  """column name"""
  updated_at

  """column name"""
  user_id

  """column name"""
  weight
}

"""
input type for updating data in table "body_info_data_histories"
"""
input body_info_data_histories_set_input {
  body_fat_percentage: Int
  created_at: timestamptz
  date: timestamptz
  height: numeric
  id: Int
  is_record: Boolean
  updated_at: timestamptz
  user_id: Int
  weight: numeric
}

"""aggregate stddev on columns"""
type body_info_data_histories_stddev_fields {
  body_fat_percentage: Float
  height: Float
  id: Float
  user_id: Float
  weight: Float
}

"""aggregate stddev_pop on columns"""
type body_info_data_histories_stddev_pop_fields {
  body_fat_percentage: Float
  height: Float
  id: Float
  user_id: Float
  weight: Float
}

"""aggregate stddev_samp on columns"""
type body_info_data_histories_stddev_samp_fields {
  body_fat_percentage: Float
  height: Float
  id: Float
  user_id: Float
  weight: Float
}

"""aggregate sum on columns"""
type body_info_data_histories_sum_fields {
  body_fat_percentage: Int
  height: numeric
  id: Int
  user_id: Int
  weight: numeric
}

"""
update columns of table "body_info_data_histories"
"""
enum body_info_data_histories_update_column {
  """column name"""
  body_fat_percentage

  """column name"""
  created_at

  """column name"""
  date

  """column name"""
  height

  """column name"""
  id

  """column name"""
  is_record

  """column name"""
  updated_at

  """column name"""
  user_id

  """column name"""
  weight
}

"""aggregate var_pop on columns"""
type body_info_data_histories_var_pop_fields {
  body_fat_percentage: Float
  height: Float
  id: Float
  user_id: Float
  weight: Float
}

"""aggregate var_samp on columns"""
type body_info_data_histories_var_samp_fields {
  body_fat_percentage: Float
  height: Float
  id: Float
  user_id: Float
  weight: Float
}

"""aggregate variance on columns"""
type body_info_data_histories_variance_fields {
  body_fat_percentage: Float
  height: Float
  id: Float
  user_id: Float
  weight: Float
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "body_info_data_histories"
  """
  delete_body_info_data_histories(
    """filter the rows which have to be deleted"""
    where: body_info_data_histories_bool_exp!
  ): body_info_data_histories_mutation_response

  """
  delete single row from the table: "body_info_data_histories"
  """
  delete_body_info_data_histories_by_pk(id: Int!): body_info_data_histories

  """
  delete data from the table: "training_categories"
  """
  delete_training_categories(
    """filter the rows which have to be deleted"""
    where: training_categories_bool_exp!
  ): training_categories_mutation_response

  """
  delete single row from the table: "training_categories"
  """
  delete_training_categories_by_pk(id: Int!): training_categories

  """
  delete data from the table: "training_types"
  """
  delete_training_types(
    """filter the rows which have to be deleted"""
    where: training_types_bool_exp!
  ): training_types_mutation_response

  """
  delete single row from the table: "training_types"
  """
  delete_training_types_by_pk(id: Int!): training_types

  """
  delete data from the table: "trainings"
  """
  delete_trainings(
    """filter the rows which have to be deleted"""
    where: trainings_bool_exp!
  ): trainings_mutation_response

  """
  delete single row from the table: "trainings"
  """
  delete_trainings_by_pk(id: Int!): trainings

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: Int!): users

  """
  insert data into the table: "body_info_data_histories"
  """
  insert_body_info_data_histories(
    """the rows to be inserted"""
    objects: [body_info_data_histories_insert_input!]!

    """upsert condition"""
    on_conflict: body_info_data_histories_on_conflict
  ): body_info_data_histories_mutation_response

  """
  insert a single row into the table: "body_info_data_histories"
  """
  insert_body_info_data_histories_one(
    """the row to be inserted"""
    object: body_info_data_histories_insert_input!

    """upsert condition"""
    on_conflict: body_info_data_histories_on_conflict
  ): body_info_data_histories

  """
  insert data into the table: "training_categories"
  """
  insert_training_categories(
    """the rows to be inserted"""
    objects: [training_categories_insert_input!]!

    """upsert condition"""
    on_conflict: training_categories_on_conflict
  ): training_categories_mutation_response

  """
  insert a single row into the table: "training_categories"
  """
  insert_training_categories_one(
    """the row to be inserted"""
    object: training_categories_insert_input!

    """upsert condition"""
    on_conflict: training_categories_on_conflict
  ): training_categories

  """
  insert data into the table: "training_types"
  """
  insert_training_types(
    """the rows to be inserted"""
    objects: [training_types_insert_input!]!

    """upsert condition"""
    on_conflict: training_types_on_conflict
  ): training_types_mutation_response

  """
  insert a single row into the table: "training_types"
  """
  insert_training_types_one(
    """the row to be inserted"""
    object: training_types_insert_input!

    """upsert condition"""
    on_conflict: training_types_on_conflict
  ): training_types

  """
  insert data into the table: "trainings"
  """
  insert_trainings(
    """the rows to be inserted"""
    objects: [trainings_insert_input!]!

    """upsert condition"""
    on_conflict: trainings_on_conflict
  ): trainings_mutation_response

  """
  insert a single row into the table: "trainings"
  """
  insert_trainings_one(
    """the row to be inserted"""
    object: trainings_insert_input!

    """upsert condition"""
    on_conflict: trainings_on_conflict
  ): trainings

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "body_info_data_histories"
  """
  update_body_info_data_histories(
    """increments the numeric columns with given value of the filtered values"""
    _inc: body_info_data_histories_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: body_info_data_histories_set_input

    """filter the rows which have to be updated"""
    where: body_info_data_histories_bool_exp!
  ): body_info_data_histories_mutation_response

  """
  update single row of the table: "body_info_data_histories"
  """
  update_body_info_data_histories_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: body_info_data_histories_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: body_info_data_histories_set_input
    pk_columns: body_info_data_histories_pk_columns_input!
  ): body_info_data_histories

  """
  update data of the table: "training_categories"
  """
  update_training_categories(
    """increments the numeric columns with given value of the filtered values"""
    _inc: training_categories_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: training_categories_set_input

    """filter the rows which have to be updated"""
    where: training_categories_bool_exp!
  ): training_categories_mutation_response

  """
  update single row of the table: "training_categories"
  """
  update_training_categories_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: training_categories_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: training_categories_set_input
    pk_columns: training_categories_pk_columns_input!
  ): training_categories

  """
  update data of the table: "training_types"
  """
  update_training_types(
    """increments the numeric columns with given value of the filtered values"""
    _inc: training_types_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: training_types_set_input

    """filter the rows which have to be updated"""
    where: training_types_bool_exp!
  ): training_types_mutation_response

  """
  update single row of the table: "training_types"
  """
  update_training_types_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: training_types_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: training_types_set_input
    pk_columns: training_types_pk_columns_input!
  ): training_types

  """
  update data of the table: "trainings"
  """
  update_trainings(
    """increments the numeric columns with given value of the filtered values"""
    _inc: trainings_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: trainings_set_input

    """filter the rows which have to be updated"""
    where: trainings_bool_exp!
  ): trainings_mutation_response

  """
  update single row of the table: "trainings"
  """
  update_trainings_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: trainings_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: trainings_set_input
    pk_columns: trainings_pk_columns_input!
  ): trainings

  """
  update data of the table: "users"
  """
  update_users(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "body_info_data_histories"
  """
  body_info_data_histories(
    """distinct select on columns"""
    distinct_on: [body_info_data_histories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [body_info_data_histories_order_by!]

    """filter the rows returned"""
    where: body_info_data_histories_bool_exp
  ): [body_info_data_histories!]!

  """
  fetch aggregated fields from the table: "body_info_data_histories"
  """
  body_info_data_histories_aggregate(
    """distinct select on columns"""
    distinct_on: [body_info_data_histories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [body_info_data_histories_order_by!]

    """filter the rows returned"""
    where: body_info_data_histories_bool_exp
  ): body_info_data_histories_aggregate!

  """
  fetch data from the table: "body_info_data_histories" using primary key columns
  """
  body_info_data_histories_by_pk(id: Int!): body_info_data_histories

  """
  fetch data from the table: "training_categories"
  """
  training_categories(
    """distinct select on columns"""
    distinct_on: [training_categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [training_categories_order_by!]

    """filter the rows returned"""
    where: training_categories_bool_exp
  ): [training_categories!]!

  """
  fetch aggregated fields from the table: "training_categories"
  """
  training_categories_aggregate(
    """distinct select on columns"""
    distinct_on: [training_categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [training_categories_order_by!]

    """filter the rows returned"""
    where: training_categories_bool_exp
  ): training_categories_aggregate!

  """
  fetch data from the table: "training_categories" using primary key columns
  """
  training_categories_by_pk(id: Int!): training_categories

  """
  fetch data from the table: "training_types"
  """
  training_types(
    """distinct select on columns"""
    distinct_on: [training_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [training_types_order_by!]

    """filter the rows returned"""
    where: training_types_bool_exp
  ): [training_types!]!

  """
  fetch aggregated fields from the table: "training_types"
  """
  training_types_aggregate(
    """distinct select on columns"""
    distinct_on: [training_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [training_types_order_by!]

    """filter the rows returned"""
    where: training_types_bool_exp
  ): training_types_aggregate!

  """fetch data from the table: "training_types" using primary key columns"""
  training_types_by_pk(id: Int!): training_types

  """An array relationship"""
  trainings(
    """distinct select on columns"""
    distinct_on: [trainings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trainings_order_by!]

    """filter the rows returned"""
    where: trainings_bool_exp
  ): [trainings!]!

  """An aggregate relationship"""
  trainings_aggregate(
    """distinct select on columns"""
    distinct_on: [trainings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trainings_order_by!]

    """filter the rows returned"""
    where: trainings_bool_exp
  ): trainings_aggregate!

  """fetch data from the table: "trainings" using primary key columns"""
  trainings_by_pk(id: Int!): trainings

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users
}

type subscription_root {
  """
  fetch data from the table: "body_info_data_histories"
  """
  body_info_data_histories(
    """distinct select on columns"""
    distinct_on: [body_info_data_histories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [body_info_data_histories_order_by!]

    """filter the rows returned"""
    where: body_info_data_histories_bool_exp
  ): [body_info_data_histories!]!

  """
  fetch aggregated fields from the table: "body_info_data_histories"
  """
  body_info_data_histories_aggregate(
    """distinct select on columns"""
    distinct_on: [body_info_data_histories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [body_info_data_histories_order_by!]

    """filter the rows returned"""
    where: body_info_data_histories_bool_exp
  ): body_info_data_histories_aggregate!

  """
  fetch data from the table: "body_info_data_histories" using primary key columns
  """
  body_info_data_histories_by_pk(id: Int!): body_info_data_histories

  """
  fetch data from the table: "training_categories"
  """
  training_categories(
    """distinct select on columns"""
    distinct_on: [training_categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [training_categories_order_by!]

    """filter the rows returned"""
    where: training_categories_bool_exp
  ): [training_categories!]!

  """
  fetch aggregated fields from the table: "training_categories"
  """
  training_categories_aggregate(
    """distinct select on columns"""
    distinct_on: [training_categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [training_categories_order_by!]

    """filter the rows returned"""
    where: training_categories_bool_exp
  ): training_categories_aggregate!

  """
  fetch data from the table: "training_categories" using primary key columns
  """
  training_categories_by_pk(id: Int!): training_categories

  """
  fetch data from the table: "training_types"
  """
  training_types(
    """distinct select on columns"""
    distinct_on: [training_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [training_types_order_by!]

    """filter the rows returned"""
    where: training_types_bool_exp
  ): [training_types!]!

  """
  fetch aggregated fields from the table: "training_types"
  """
  training_types_aggregate(
    """distinct select on columns"""
    distinct_on: [training_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [training_types_order_by!]

    """filter the rows returned"""
    where: training_types_bool_exp
  ): training_types_aggregate!

  """fetch data from the table: "training_types" using primary key columns"""
  training_types_by_pk(id: Int!): training_types

  """An array relationship"""
  trainings(
    """distinct select on columns"""
    distinct_on: [trainings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trainings_order_by!]

    """filter the rows returned"""
    where: trainings_bool_exp
  ): [trainings!]!

  """An aggregate relationship"""
  trainings_aggregate(
    """distinct select on columns"""
    distinct_on: [trainings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trainings_order_by!]

    """filter the rows returned"""
    where: trainings_bool_exp
  ): trainings_aggregate!

  """fetch data from the table: "trainings" using primary key columns"""
  trainings_by_pk(id: Int!): trainings

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "training_categories"
"""
type training_categories {
  created_at: timestamptz!
  id: Int!
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "training_categories"
"""
type training_categories_aggregate {
  aggregate: training_categories_aggregate_fields
  nodes: [training_categories!]!
}

"""
aggregate fields of "training_categories"
"""
type training_categories_aggregate_fields {
  avg: training_categories_avg_fields
  count(columns: [training_categories_select_column!], distinct: Boolean): Int!
  max: training_categories_max_fields
  min: training_categories_min_fields
  stddev: training_categories_stddev_fields
  stddev_pop: training_categories_stddev_pop_fields
  stddev_samp: training_categories_stddev_samp_fields
  sum: training_categories_sum_fields
  var_pop: training_categories_var_pop_fields
  var_samp: training_categories_var_samp_fields
  variance: training_categories_variance_fields
}

"""aggregate avg on columns"""
type training_categories_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "training_categories". All fields are combined with a logical 'AND'.
"""
input training_categories_bool_exp {
  _and: [training_categories_bool_exp!]
  _not: training_categories_bool_exp
  _or: [training_categories_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "training_categories"
"""
enum training_categories_constraint {
  """unique or primary key constraint"""
  training_types_pkey
}

"""
input type for incrementing numeric columns in table "training_categories"
"""
input training_categories_inc_input {
  id: Int
}

"""
input type for inserting data into table "training_categories"
"""
input training_categories_insert_input {
  created_at: timestamptz
  id: Int
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type training_categories_max_fields {
  created_at: timestamptz
  id: Int
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type training_categories_min_fields {
  created_at: timestamptz
  id: Int
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "training_categories"
"""
type training_categories_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [training_categories!]!
}

"""
input type for inserting object relation for remote table "training_categories"
"""
input training_categories_obj_rel_insert_input {
  data: training_categories_insert_input!

  """upsert condition"""
  on_conflict: training_categories_on_conflict
}

"""
on_conflict condition type for table "training_categories"
"""
input training_categories_on_conflict {
  constraint: training_categories_constraint!
  update_columns: [training_categories_update_column!]! = []
  where: training_categories_bool_exp
}

"""Ordering options when selecting data from "training_categories"."""
input training_categories_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: training_categories"""
input training_categories_pk_columns_input {
  id: Int!
}

"""
select columns of table "training_categories"
"""
enum training_categories_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "training_categories"
"""
input training_categories_set_input {
  created_at: timestamptz
  id: Int
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type training_categories_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type training_categories_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type training_categories_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type training_categories_sum_fields {
  id: Int
}

"""
update columns of table "training_categories"
"""
enum training_categories_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type training_categories_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type training_categories_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type training_categories_variance_fields {
  id: Float
}

"""
columns and relationships of "training_types"
"""
type training_types {
  created_at: timestamptz!
  id: Int!
  max_weight: numeric
  min_weight: numeric
  name: String!

  """An object relationship"""
  training_category: training_categories!
  training_category_id: Int!

  """An array relationship"""
  trainings(
    """distinct select on columns"""
    distinct_on: [trainings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trainings_order_by!]

    """filter the rows returned"""
    where: trainings_bool_exp
  ): [trainings!]!

  """An aggregate relationship"""
  trainings_aggregate(
    """distinct select on columns"""
    distinct_on: [trainings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trainings_order_by!]

    """filter the rows returned"""
    where: trainings_bool_exp
  ): trainings_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "training_types"
"""
type training_types_aggregate {
  aggregate: training_types_aggregate_fields
  nodes: [training_types!]!
}

"""
aggregate fields of "training_types"
"""
type training_types_aggregate_fields {
  avg: training_types_avg_fields
  count(columns: [training_types_select_column!], distinct: Boolean): Int!
  max: training_types_max_fields
  min: training_types_min_fields
  stddev: training_types_stddev_fields
  stddev_pop: training_types_stddev_pop_fields
  stddev_samp: training_types_stddev_samp_fields
  sum: training_types_sum_fields
  var_pop: training_types_var_pop_fields
  var_samp: training_types_var_samp_fields
  variance: training_types_variance_fields
}

"""aggregate avg on columns"""
type training_types_avg_fields {
  id: Float
  max_weight: Float
  min_weight: Float
  training_category_id: Float
}

"""
Boolean expression to filter rows from the table "training_types". All fields are combined with a logical 'AND'.
"""
input training_types_bool_exp {
  _and: [training_types_bool_exp!]
  _not: training_types_bool_exp
  _or: [training_types_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  max_weight: numeric_comparison_exp
  min_weight: numeric_comparison_exp
  name: String_comparison_exp
  training_category: training_categories_bool_exp
  training_category_id: Int_comparison_exp
  trainings: trainings_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "training_types"
"""
enum training_types_constraint {
  """unique or primary key constraint"""
  training_categories_pkey
}

"""
input type for incrementing numeric columns in table "training_types"
"""
input training_types_inc_input {
  id: Int
  max_weight: numeric
  min_weight: numeric
  training_category_id: Int
}

"""
input type for inserting data into table "training_types"
"""
input training_types_insert_input {
  created_at: timestamptz
  id: Int
  max_weight: numeric
  min_weight: numeric
  name: String
  training_category: training_categories_obj_rel_insert_input
  training_category_id: Int
  trainings: trainings_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type training_types_max_fields {
  created_at: timestamptz
  id: Int
  max_weight: numeric
  min_weight: numeric
  name: String
  training_category_id: Int
  updated_at: timestamptz
}

"""aggregate min on columns"""
type training_types_min_fields {
  created_at: timestamptz
  id: Int
  max_weight: numeric
  min_weight: numeric
  name: String
  training_category_id: Int
  updated_at: timestamptz
}

"""
response of any mutation on the table "training_types"
"""
type training_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [training_types!]!
}

"""
input type for inserting object relation for remote table "training_types"
"""
input training_types_obj_rel_insert_input {
  data: training_types_insert_input!

  """upsert condition"""
  on_conflict: training_types_on_conflict
}

"""
on_conflict condition type for table "training_types"
"""
input training_types_on_conflict {
  constraint: training_types_constraint!
  update_columns: [training_types_update_column!]! = []
  where: training_types_bool_exp
}

"""Ordering options when selecting data from "training_types"."""
input training_types_order_by {
  created_at: order_by
  id: order_by
  max_weight: order_by
  min_weight: order_by
  name: order_by
  training_category: training_categories_order_by
  training_category_id: order_by
  trainings_aggregate: trainings_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: training_types"""
input training_types_pk_columns_input {
  id: Int!
}

"""
select columns of table "training_types"
"""
enum training_types_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  max_weight

  """column name"""
  min_weight

  """column name"""
  name

  """column name"""
  training_category_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "training_types"
"""
input training_types_set_input {
  created_at: timestamptz
  id: Int
  max_weight: numeric
  min_weight: numeric
  name: String
  training_category_id: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type training_types_stddev_fields {
  id: Float
  max_weight: Float
  min_weight: Float
  training_category_id: Float
}

"""aggregate stddev_pop on columns"""
type training_types_stddev_pop_fields {
  id: Float
  max_weight: Float
  min_weight: Float
  training_category_id: Float
}

"""aggregate stddev_samp on columns"""
type training_types_stddev_samp_fields {
  id: Float
  max_weight: Float
  min_weight: Float
  training_category_id: Float
}

"""aggregate sum on columns"""
type training_types_sum_fields {
  id: Int
  max_weight: numeric
  min_weight: numeric
  training_category_id: Int
}

"""
update columns of table "training_types"
"""
enum training_types_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  max_weight

  """column name"""
  min_weight

  """column name"""
  name

  """column name"""
  training_category_id

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type training_types_var_pop_fields {
  id: Float
  max_weight: Float
  min_weight: Float
  training_category_id: Float
}

"""aggregate var_samp on columns"""
type training_types_var_samp_fields {
  id: Float
  max_weight: Float
  min_weight: Float
  training_category_id: Float
}

"""aggregate variance on columns"""
type training_types_variance_fields {
  id: Float
  max_weight: Float
  min_weight: Float
  training_category_id: Float
}

"""
columns and relationships of "trainings"
"""
type trainings {
  created_at: timestamptz!
  date: date!
  id: Int!
  is_finish: Boolean!
  training_count: Int
  training_set: Int

  """An object relationship"""
  training_type: training_types!
  training_type_id: Int!
  training_weight: numeric
  updated_at: timestamptz!
  user_id: Int!
}

"""
aggregated selection of "trainings"
"""
type trainings_aggregate {
  aggregate: trainings_aggregate_fields
  nodes: [trainings!]!
}

"""
aggregate fields of "trainings"
"""
type trainings_aggregate_fields {
  avg: trainings_avg_fields
  count(columns: [trainings_select_column!], distinct: Boolean): Int!
  max: trainings_max_fields
  min: trainings_min_fields
  stddev: trainings_stddev_fields
  stddev_pop: trainings_stddev_pop_fields
  stddev_samp: trainings_stddev_samp_fields
  sum: trainings_sum_fields
  var_pop: trainings_var_pop_fields
  var_samp: trainings_var_samp_fields
  variance: trainings_variance_fields
}

"""
order by aggregate values of table "trainings"
"""
input trainings_aggregate_order_by {
  avg: trainings_avg_order_by
  count: order_by
  max: trainings_max_order_by
  min: trainings_min_order_by
  stddev: trainings_stddev_order_by
  stddev_pop: trainings_stddev_pop_order_by
  stddev_samp: trainings_stddev_samp_order_by
  sum: trainings_sum_order_by
  var_pop: trainings_var_pop_order_by
  var_samp: trainings_var_samp_order_by
  variance: trainings_variance_order_by
}

"""
input type for inserting array relation for remote table "trainings"
"""
input trainings_arr_rel_insert_input {
  data: [trainings_insert_input!]!

  """upsert condition"""
  on_conflict: trainings_on_conflict
}

"""aggregate avg on columns"""
type trainings_avg_fields {
  id: Float
  training_count: Float
  training_set: Float
  training_type_id: Float
  training_weight: Float
  user_id: Float
}

"""
order by avg() on columns of table "trainings"
"""
input trainings_avg_order_by {
  id: order_by
  training_count: order_by
  training_set: order_by
  training_type_id: order_by
  training_weight: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "trainings". All fields are combined with a logical 'AND'.
"""
input trainings_bool_exp {
  _and: [trainings_bool_exp!]
  _not: trainings_bool_exp
  _or: [trainings_bool_exp!]
  created_at: timestamptz_comparison_exp
  date: date_comparison_exp
  id: Int_comparison_exp
  is_finish: Boolean_comparison_exp
  training_count: Int_comparison_exp
  training_set: Int_comparison_exp
  training_type: training_types_bool_exp
  training_type_id: Int_comparison_exp
  training_weight: numeric_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "trainings"
"""
enum trainings_constraint {
  """unique or primary key constraint"""
  trainings_pkey
}

"""
input type for incrementing numeric columns in table "trainings"
"""
input trainings_inc_input {
  id: Int
  training_count: Int
  training_set: Int
  training_type_id: Int
  training_weight: numeric
  user_id: Int
}

"""
input type for inserting data into table "trainings"
"""
input trainings_insert_input {
  created_at: timestamptz
  date: date
  id: Int
  is_finish: Boolean
  training_count: Int
  training_set: Int
  training_type: training_types_obj_rel_insert_input
  training_type_id: Int
  training_weight: numeric
  updated_at: timestamptz
  user_id: Int
}

"""aggregate max on columns"""
type trainings_max_fields {
  created_at: timestamptz
  date: date
  id: Int
  training_count: Int
  training_set: Int
  training_type_id: Int
  training_weight: numeric
  updated_at: timestamptz
  user_id: Int
}

"""
order by max() on columns of table "trainings"
"""
input trainings_max_order_by {
  created_at: order_by
  date: order_by
  id: order_by
  training_count: order_by
  training_set: order_by
  training_type_id: order_by
  training_weight: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type trainings_min_fields {
  created_at: timestamptz
  date: date
  id: Int
  training_count: Int
  training_set: Int
  training_type_id: Int
  training_weight: numeric
  updated_at: timestamptz
  user_id: Int
}

"""
order by min() on columns of table "trainings"
"""
input trainings_min_order_by {
  created_at: order_by
  date: order_by
  id: order_by
  training_count: order_by
  training_set: order_by
  training_type_id: order_by
  training_weight: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "trainings"
"""
type trainings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [trainings!]!
}

"""
on_conflict condition type for table "trainings"
"""
input trainings_on_conflict {
  constraint: trainings_constraint!
  update_columns: [trainings_update_column!]! = []
  where: trainings_bool_exp
}

"""Ordering options when selecting data from "trainings"."""
input trainings_order_by {
  created_at: order_by
  date: order_by
  id: order_by
  is_finish: order_by
  training_count: order_by
  training_set: order_by
  training_type: training_types_order_by
  training_type_id: order_by
  training_weight: order_by
  updated_at: order_by
  user_id: order_by
}

"""primary key columns input for table: trainings"""
input trainings_pk_columns_input {
  id: Int!
}

"""
select columns of table "trainings"
"""
enum trainings_select_column {
  """column name"""
  created_at

  """column name"""
  date

  """column name"""
  id

  """column name"""
  is_finish

  """column name"""
  training_count

  """column name"""
  training_set

  """column name"""
  training_type_id

  """column name"""
  training_weight

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "trainings"
"""
input trainings_set_input {
  created_at: timestamptz
  date: date
  id: Int
  is_finish: Boolean
  training_count: Int
  training_set: Int
  training_type_id: Int
  training_weight: numeric
  updated_at: timestamptz
  user_id: Int
}

"""aggregate stddev on columns"""
type trainings_stddev_fields {
  id: Float
  training_count: Float
  training_set: Float
  training_type_id: Float
  training_weight: Float
  user_id: Float
}

"""
order by stddev() on columns of table "trainings"
"""
input trainings_stddev_order_by {
  id: order_by
  training_count: order_by
  training_set: order_by
  training_type_id: order_by
  training_weight: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type trainings_stddev_pop_fields {
  id: Float
  training_count: Float
  training_set: Float
  training_type_id: Float
  training_weight: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "trainings"
"""
input trainings_stddev_pop_order_by {
  id: order_by
  training_count: order_by
  training_set: order_by
  training_type_id: order_by
  training_weight: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type trainings_stddev_samp_fields {
  id: Float
  training_count: Float
  training_set: Float
  training_type_id: Float
  training_weight: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "trainings"
"""
input trainings_stddev_samp_order_by {
  id: order_by
  training_count: order_by
  training_set: order_by
  training_type_id: order_by
  training_weight: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type trainings_sum_fields {
  id: Int
  training_count: Int
  training_set: Int
  training_type_id: Int
  training_weight: numeric
  user_id: Int
}

"""
order by sum() on columns of table "trainings"
"""
input trainings_sum_order_by {
  id: order_by
  training_count: order_by
  training_set: order_by
  training_type_id: order_by
  training_weight: order_by
  user_id: order_by
}

"""
update columns of table "trainings"
"""
enum trainings_update_column {
  """column name"""
  created_at

  """column name"""
  date

  """column name"""
  id

  """column name"""
  is_finish

  """column name"""
  training_count

  """column name"""
  training_set

  """column name"""
  training_type_id

  """column name"""
  training_weight

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""aggregate var_pop on columns"""
type trainings_var_pop_fields {
  id: Float
  training_count: Float
  training_set: Float
  training_type_id: Float
  training_weight: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "trainings"
"""
input trainings_var_pop_order_by {
  id: order_by
  training_count: order_by
  training_set: order_by
  training_type_id: order_by
  training_weight: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type trainings_var_samp_fields {
  id: Float
  training_count: Float
  training_set: Float
  training_type_id: Float
  training_weight: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "trainings"
"""
input trainings_var_samp_order_by {
  id: order_by
  training_count: order_by
  training_set: order_by
  training_type_id: order_by
  training_weight: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type trainings_variance_fields {
  id: Float
  training_count: Float
  training_set: Float
  training_type_id: Float
  training_weight: Float
  user_id: Float
}

"""
order by variance() on columns of table "trainings"
"""
input trainings_variance_order_by {
  id: order_by
  training_count: order_by
  training_set: order_by
  training_type_id: order_by
  training_weight: order_by
  user_id: order_by
}

"""
columns and relationships of "users"
"""
type users {
  id: Int!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""aggregate avg on columns"""
type users_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  id: Int_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  users_pkey
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
  id: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  id: Int
}

"""aggregate max on columns"""
type users_max_fields {
  id: Int
}

"""aggregate min on columns"""
type users_min_fields {
  id: Int
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  id: order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: Int!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  id
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  id: Int
}

"""aggregate stddev on columns"""
type users_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type users_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type users_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type users_sum_fields {
  id: Int
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  id
}

"""aggregate var_pop on columns"""
type users_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type users_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type users_variance_fields {
  id: Float
}